design of scaffold:

the private members I declared in my scaffold are:

int m_nColumns;
int m_nLevels;
vector<vector<int>> m_grid; // 
stack<int> Movelist;


I used vectors to create my array of the scaffold to store the values
and the stack to record the history of moves

Everytime my scaffold uses its makeMove function it pushes int value of the column of that the checker
 was dropped in, and everytime my undoMove function is called. It undoes the move by looking at the top of 
the stack, and check the levels of the columns from top to down and turns the next filled spot VACANT and pops the move from the stack.


makemove psuedocode:

checks if the column is valid
iterates through each level of corresponding column from bottom to top
check if the topmost spot is VACANT
If VACANT changes that VACANT Spot to the color of the checker 
pushes the column number into the stack of moves
return true

othewise return false

undoMove psudeocode:

if the stack of moves is empty then return 0 otherwise

set the lastcolumn to the top the moves stack
iterate through the levels of the last column from top to bottom
and make the first filled spot VACANT
pop the stack
break the loop
return the value of lastcolumn

checkerAt psuedocode:

if the column and level are valid proceed
checks if the corresponding level and column are the respective color

display psuedocode:

iterates through the grid that holds the values of the checkers and vacant spots on the scaffold
the leftmost edges of the scaffold:
	if the spot is vacant put "| |"
	if spot is RED put "|R|"
	if spot i BLACK put "|B|"
the other edges:
if the spot is vacant put " |"
	if spot is RED put "R|"
	if spot i BLACK put "B|"

then display the bottom line
	if leftmost edge:
		display "+-+"
		display "-+"

design of game:

for game I added the following member variables:

Scaffold m_board; 
Player* m_red;
Player* m_black;
int m_N; // number of checkers in a row to win
int winner; // the color of the winner
int turn; // indicates the turn of RED or BLACK

psuedo code for completed:
iterates through each spot in the grid
counts the horizontal rows, vertical rows, diagonal rows for N of the same color including the center
	counts in one direction so there will be a total of 8 counters.
if any of the 8 counters count N in a row for the same color return true and sets winner to color
returns true


if scaffold is completely filled 
return true and set winner to tied game

otherwise return false

psuedocode for taketurn 
checks if completed returns true
return false

if turn is red
	make a move on the board
	checks if complted
		return false if completed
if turn is black
	make a move on the board
	checks if complted
		return false if completed
switches turn
if not completed
return true

psuedocode for play:

displays the board
if turn is red
	displays name of red player
if turn is black
	displays name of black player
checks if one of the players are computer
	if computer
		press enter to continue the move for computer
calls taketurn
	if taketurn returns true, keep playing, if return false, game is over
displays the final scaffold
display winner


humanplayer implementation:

goes through a loop until player inputs a valid column  ( greater than zero and up to max column
also checks if the column is full)
then returns input if valid
otherwise return -1

badplayer implementation:

iterate through each column from left to right
if there is a vacant spot make a move in the column

test cases for scaffold

	tests for makemoves
	1) input invalid column // to check if function returns false and does nothing
	2) input invalid colors // to check if function returns false and does nothing
	
	tests for undoMove
	3) test if it undos a move if the history is empty // to check if function returns and does nothing

test case for game

	tests for completed:
	for each color check if
	1) games is complete for N checkers in a row,  // returns when it is suppose to for each of below
	2) in a column, 
	3) and in diagonal
	4) check if tie when board is filled

	tests for taketurn
	5) checks if turn is over the moment compteted is true // see if function should return the moment 							       //one color wins			
	6) check if turns are switch between each color after everytime function is called 

test cases for humanplayer

	1) check when you try to input invalid column 
	2) check for input is in filled column

test cases for badplayer
	1) make sure every move is always valid
	2) do nothing when no moves left
	

smartplayer
=========================================================
design of smartplayer choosemove
+++++++++++++++++++++++++++++++++++++++++


psuedocode for smartplayer::chooseMove
+++++++++++++++++++++++++++++++++++++++++

declares a int variable called move to store the best move
copys the scaffold 
passes the scaffold, N, color, and move by reference into the determineBestComputerMove function

psuedocode for rating function

for each color the function will iterate through every spot in the scaffold and check the rows, horizontals, and diagonal for the respective color

if the color that won was the computer return 1;
if the color that won was the from the other player return -1
if tied return 0
if game is not completed return -2

psuedocode for determineBestComputerMove (from spec with modifications)

When it's the computer's turn to move (i.e. the makeComputerMove function has called the determineBestComputerMove function), the determineBestComputerMove function will iterate through all possible moves that the computer can make.
For each possible move the computer could make, the function will:
Make the move (updating the scaffold appropriately with the new checker)
Use the rating function to rate the resulting scaffold after the move has been made (to see if the computer just won, it's a tie, etc.).
If the rating function indicates that the computer won or the move resulted in a tie, then the function should remember the result of this move (pushes the rating into a vector). Otherwise, call the determineBestHumanMove function (shown below) and get its return value(by pushing the return value into a vector). 
Undo the computer's trial move (removing the checker from the scaffold appropriately)
The determineBestComputerMove function will then chose the move that results in the scaffold with the maximum value (i.e. a value of 1, if possible, indicating a win for the computer player). If there is more than one possible move with the highest rating, then the function can choose whichever of these moves is most convenient.
The function then returns two numbers: (a) one indicating which move should be made on behalf of the computer (and the makeComputerMove function can then make that move), and (b) a number (1, 0, or -1) that indicates the best possible score that the suggested move will eventually result in.

The determineBestHumanMove function iterates through all possible moves that the human can make in response to the last computer trial move.
For each possible move the human could make (remember, this is a simulated move that the computer is trying out, not a real human player move), the function will:
Make the move (updating the scaffold appropriately with the new checker)
Use the rating function to rate the resulting scaffold after the move has been made (to see if the human would have just won, it's a tie, etc.).
If the rating function indicates that the user just won or the move resulted in a tie, then remember the result of this move (pushes the rating for the move into a vector). Otherwise, call the determineBestComputerMove function (shown above) on the current scaffold and get its return value. Then record the return value of determineBestComputerMove (store the rating value into a vector).
Undo the current trial move (removing the checker from the scaffold appropriately)
The determineBestHumanMove function will then chose the move that results in the scaffold with the minimum value (i.e. a value of -1, if possible, indicating a win for the human player). If there is more than one possible move with the highest rating, then the function can choose whichever of these moves is most convenient. Notice that while the computer function always wants to choose the move with the highest value, the human function wants to choose the move with the lowest value, which indicates a win for the human, rather than the computer.
The function then returns two numbers: (a) one indicating which move would likely be made on behalf of the human, and (b) a number (1, 0, or -1) that indicates the worst possible scaffold score (from the computer's perspective) that the suggested move will eventually result in (since that's what the player would try to do).

test cases for smartplayer

1) the smartplayer plays the bestmove in each round, and does not make stupid move
2) check if smartplayer makes the best non-invalid move

bugs and errors:

smartplayer does not make the bestmoves
and is slow, but implements a recursion
also my smartplayer function does not keep track of depth and accounts for it in my algorithm



