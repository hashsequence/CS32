2)
{ 'X','X','X','X','X','X','X','X','X','X'},
{ 'X','.','.','.','.','.','.','.','.','X'},
{ 'X','X','.','X','.','X','X','X','X','X'},
{ 'X','.','.','X','.','X','.','.','.','X'},
{ 'X','.','.','X','12','.','.','X','.','X'},
{ 'X','X','X','X','11','X','X','X','.','X'},
{ 'X','.','X','2','1','3','10','X','X','X'},
{ 'X','.','.','X','X','4','X','X','9','X'},
{ 'X','.','.','.','X','5','6','7','8','X'},
{ 'X','X','X','X','X','X','X','X','X','X'}

pop: 1 row: 6 col: 4
pop: 2 row: 6 col: 3
pop: 3 row: 6 col: 5
pop: 4 row: 7 col: 5
pop: 5 row: 8 col: 5
pop: 6 row: 8 col: 6
pop: 7 row: 8 col: 7
pop: 8 row: 8 col: 8
pop: 9 row: 7 col: 8
pop: 10 row: 6 col: 6
pop: 11 row: 5 col: 4
pop: 12 row: 4 col: 4

4)

{ 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
{ 'X', '.', '.', '.', '.', '.', '.', '.', '.', 'X' },
{ 'X', 'X', '.', 'X', '11', 'X', 'X', 'X', 'X', 'X' },
{ 'X', '.', '.', 'X', '8', 'X', '.', '.', '.', 'X' },
{ 'X', '.', '.', 'X', '5', '9', '12', 'X', '.', 'X' },
{ 'X', 'X', 'X', 'X', '2', 'X', 'X', 'X', '.', 'X' },
{ 'X', '.', 'X', '4', '1', '3', '6', 'X', 'X', 'X' },
{ 'X', '.', '.', 'X', 'X', '7', 'X', 'X', '.', 'X' },
{ 'X', '.', '.', '.', 'X', '10', '.', '.', '.', 'X' },
{ 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' }


Pop: 1 row: 6 col: 4
Pop: 2 row: 5 col: 4
Pop: 3 row: 6 col: 5
Pop: 4 row: 6 col: 3
Pop: 5 row: 4 col: 4
Pop: 6 row: 6 col: 6
Pop: 7 row: 7 col: 5
Pop: 8 row: 3 col: 4
Pop: 9 row: 4 col: 5
Pop: 10 row: 8 col: 5
Pop: 11 row: 2 col: 4
Pop: 12 row: 4 col: 6

The difference between the pop function of the queue and stack is that, the pop, pops the last item that 
was pushed in, whereas the queue function pops the earliest item that was pushed in. And it pushes if there 
is something north, east, south, and west in that respective order for both data structures.

